<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.longfor.itserver.mapper.ProgramWarningMapper" >
  <resultMap id="BaseResultMap" type="com.longfor.itserver.entity.ProgramWarning" >
    <!--
      WARNING - @mbggenerated
    -->
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="program_id" property="programId" jdbcType="BIGINT" />
    <result column="program_status" property="programStatus" jdbcType="INTEGER" />
    <result column="warning" property="warning" jdbcType="INTEGER" />
    <result column="remark" property="remark" jdbcType="VARCHAR" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="create_account_id" property="createAccountId" jdbcType="VARCHAR" />
    <result column="create_name" property="createName" jdbcType="VARCHAR" />
    <result column="modified_time" property="modifiedTime" jdbcType="TIMESTAMP" />
    <result column="modified_account_id" property="modifiedAccountId" jdbcType="VARCHAR" />
    <result column="modified_name" property="modifiedName" jdbcType="VARCHAR" />
  </resultMap>

  <sql id="Base_Column_List" >
    <!--
      WARNING - @mbggenerated
    -->
    id, program_id, program_status, warning, remark, create_time, create_account_id, 
    create_name, modified_time, modified_account_id, modified_name
  </sql>

  <select id="getListByWhere" parameterType="map" resultMap="BaseResultMap">
      SELECT
      <include refid="Base_Column_List"/>
      from program_warning
      <where>
        <if test="programId != null and programId != ''">
          program_id = #{programId}
        </if>
      </where>
    ORDER BY create_time DESC
  </select>

  <select id="getOneByWhere" parameterType="map" resultMap="BaseResultMap">
    SELECT
    <include refid="Base_Column_List"/>
    from program_warning
    <where>
      <if test="programId != null and programId != ''">
        program_id = #{programId}
      </if>
      <if test="programStatus != null and programStatus != ''">
        and program_status = #{programStatus}
      </if>
    </where>
    ORDER BY warning DESC
    LIMIT 0,1
  </select>

  <select id="warningSum" parameterType="string" resultType="int">
    SELECT COUNT(1) from program
    where warning_days <![CDATA[ < ]]> 3 and
    id in (SELECT program_id from program_employee where account_id = #{accountId})
  </select>

  <select id="warningRemarksSum" parameterType="string" resultType="int">
    SELECT COUNT(1) from program_warning pw
    INNER JOIN program p ON p.id=pw.program_id and p.program_status not in (999,900)
    where pw.warning!=0 and
    pw.program_id in (SELECT program_id from program_employee where account_id = #{accountId})
  </select>

  <select id="warningList" parameterType="map" resultMap="BaseResultMap">
    SELECT pw.*,p.name programName from program_warning pw
    INNER JOIN program p ON p.id=pw.program_id and p.program_status not in (999,900)
    <where>
      <if test=" isMyself == 1 " >
        pw.program_id in (SELECT program_id from program_employee where account_id = #{accountId})
      </if>
      <if test="programId != null and programId != ''">
        and pw.program_id = #{programId}
      </if>
      <if test="searchText != null and searchText != ''">
        and p.name LIKE CONCAT('%', #{searchText}, '%')
      </if>
      <if test="warningList != null">
        and pw.warning in
        <foreach item="item" index="index" collection="warningList" open="(" separator="," close=")">
          #{item}
        </foreach>
      </if>
    </where>
    ORDER BY pw.create_time desc
    LIMIT #{startRow},#{endRow}
  </select>

  <select id="warningListTotal" parameterType="map" resultType="integer">
    SELECT COUNT(1) from program_warning pw
    INNER JOIN program p ON p.id=pw.program_id and p.program_status not in (999,900)
    <where>
      <if test=" isMyself == 1 " >
        pw.program_id in (SELECT program_id from program_employee where account_id = #{accountId})
      </if>
      <if test="programId != null and programId != ''">
        and pw.program_id = #{programId}
      </if>
      <if test=" warningList != null ">
        and pw.warning in
        <foreach item="item" index="index" collection="warningList" open="(" separator="," close=")">
          #{item}
        </foreach>
      </if>
    </where>
  </select>

</mapper>