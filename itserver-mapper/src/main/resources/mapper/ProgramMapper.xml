<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.longfor.itserver.mapper.ProgramMapper">
    <resultMap id="BaseResultMap" type="com.longfor.itserver.entity.Program">
        <!--
          WARNING - @mbggenerated
        -->
        <id column="id" jdbcType="BIGINT" property="id"/>
        <result column="program_type" jdbcType="INTEGER" property="programType"/>
        <result column="product_id" jdbcType="BIGINT" property="productId"/>
        <result column="name" jdbcType="VARCHAR" property="name"/>
        <result column="product_code" jdbcType="VARCHAR" property="productCode" />
        <result column="descp" jdbcType="VARCHAR" property="descp"/>
        <result column="commit_date" jdbcType="TIMESTAMP" property="commitDate"/>
        <result column="start_date" jdbcType="TIMESTAMP" property="startDate"/>
        <result column="gray_release_date" jdbcType="TIMESTAMP" property="grayReleaseDate"/>
        <result column="release_date" jdbcType="TIMESTAMP" property="releaseDate"/>
        <result column="ued_date" jdbcType="TIMESTAMP" property="uedDate" />
        <result column="architecture_date" jdbcType="TIMESTAMP" property="architectureDate" />
        <result column="like_product" jdbcType="VARCHAR" property="likeProduct"/>
        <result column="like_program" jdbcType="VARCHAR" property="likeProgram"/>
        <result column="type" jdbcType="INTEGER" property="type"/>
        <result column="program_status" jdbcType="INTEGER" property="programStatus"/>
        <result column="modified_account_id" jdbcType="VARCHAR" property="modifiedAccountId"/>
        <result column="modified_name" jdbcType="VARCHAR" property="modifiedName"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="modified_time" jdbcType="TIMESTAMP" property="modifiedTime"/>
        <result column="product_name" jdbcType="VARCHAR" property="productName"/>

        <result column="demo_approval_date" jdbcType="TIMESTAMP" property="demoApprovalDate"/>
        <result column="bidding_date" jdbcType="TIMESTAMP" property="biddingDate"/>
        <result column="winning_bid_date" jdbcType="TIMESTAMP" property="winningBidDate"/>
        <result column="prod_approval_date" jdbcType="TIMESTAMP" property="prodApprovalDate"/>
        <result column="dev_approval_date" jdbcType="TIMESTAMP" property="devApprovalDate"/>
        <result column="test_approval_date" jdbcType="TIMESTAMP" property="testApprovalDate"/>
        <result column="online_plan_date" jdbcType="TIMESTAMP" property="onlinePlanDate"/>
        <result column="dev_type" jdbcType="INTEGER" property="devType"/>
        <result column="analyzing_conditions" jdbcType="VARCHAR" property="analyzingConditions"/>
        <result column="dev_workload" jdbcType="INTEGER" property="devWorkload"/>
        <result column="overall_cost" jdbcType="DECIMAL" property="overallCost"/>
        <result column="bid_dev_workload" jdbcType="INTEGER" property="bidDevWorkload"/>
        <result column="bid_overall_cost" jdbcType="DECIMAL" property="bidOverallCost"/>
        <result column="approval_status" jdbcType="DECIMAL" property="approvalStatus"/>
        <result column="bid_oversingle_cost" property="bidOversingleCost" jdbcType="DECIMAL" />
        <result column="new_code" jdbcType="VARCHAR" property="newCode"/>
        <result column="replay_date" jdbcType="TIMESTAMP" property="replayDate"/>
        <result column="all_extension_date" jdbcType="TIMESTAMP" property="allExtensionDate"/>

        <result column="actual_commit_date" jdbcType="TIMESTAMP" property="actualCommitDate"/>
        <result column="actual_demo_approval_date" jdbcType="TIMESTAMP" property="actualDemoApprovalDate"/>
        <result column="actual_bidding_date" jdbcType="TIMESTAMP" property="actualBiddingDate"/>
        <result column="actual_winning_bid_date" jdbcType="TIMESTAMP" property="actualWinningBidDate"/>
        <result column="actual_prod_approval_date" jdbcType="TIMESTAMP" property="actualProdApprovalDate"/>
        <result column="actual_dev_approval_date" jdbcType="TIMESTAMP" property="actualDevApprovalDate"/>
        <result column="actual_test_approval_date" jdbcType="TIMESTAMP" property="actualTestApprovalDate"/>
        <result column="actual_online_plan_date" jdbcType="TIMESTAMP" property="actualOnlinePlanDate"/>
        <result column="actual_gray_release_date" jdbcType="TIMESTAMP" property="actualGrayReleaseDate"/>
        <result column="actual_all_extension_date" jdbcType="TIMESTAMP" property="actualAllExtensionDate"/>
        <result column="actual_replay_date" jdbcType="TIMESTAMP" property="actualReplayDate"/>
        <result column="warning_days" jdbcType="INTEGER" property="warningDays"/>
        <result column="commit_descp" jdbcType="VARCHAR" property="commitDescp"/>
    </resultMap>

    <resultMap id="ProgramResultMap" type="com.longfor.itserver.entity.ps.PsProgram">
        <id column="id" jdbcType="BIGINT" property="id"/>
        <result column="name" jdbcType="VARCHAR" property="name"/>
        <result column="type" jdbcType="VARCHAR" property="type"/>
        <result column="program_status" jdbcType="VARCHAR" property="programStatus"/>
    </resultMap>

    <resultMap id="ProgramDetailResultMap" extends="BaseResultMap"
               type="com.longfor.itserver.entity.ps.PsProgramDetail">
        <result column="warning" property="warning" jdbcType="VARCHAR"/>
        <result column="warningRemark" property="warningRemark" jdbcType="VARCHAR"/>
        <result column="currNodeDate" property="currNodeDate" jdbcType="VARCHAR"/>
        <result column="personLiable" property="personLiable" jdbcType="VARCHAR"/>
    </resultMap>

    <resultMap id="ApiBaseResultMap" type="com.longfor.itserver.entity.ps.PsAPIProgram">
        <id column="id" property="id" jdbcType="BIGINT"/>
        <result column="name" property="name" jdbcType="VARCHAR"/>
        <result column="pending" property="pending" jdbcType="BIGINT"/>
        <result column="working" property="working" jdbcType="BIGINT"/>
        <result column="complete" property="complete" jdbcType="BIGINT"/>
    </resultMap>

    <sql id="Base_Column_List">
        <!--
          WARNING - @mbggenerated
        -->
        id,program_type, product_id, product_name, product_code, name, descp, commit_date, start_date, gray_release_date, release_date,
        ued_date, architecture_date, like_product, like_program, type, program_status, modified_account_id, modified_name,
        create_time, modified_time,demo_approval_date,bidding_date,winning_bid_date,prod_approval_date,dev_approval_date
        ,test_approval_date,online_plan_date,dev_type,analyzing_conditions,dev_workload,overall_cost,bid_dev_workload
        ,bid_overall_cost,approval_status,bid_oversingle_cost,new_code,replay_date,all_extension_date
        ,actual_commit_date,actual_demo_approval_date,actual_bidding_date,actual_winning_bid_date,actual_prod_approval_date
        ,actual_dev_approval_date,actual_test_approval_date,actual_online_plan_date,actual_gray_release_date
        ,actual_all_extension_date,actual_replay_date,warning_days,commit_descp
    </sql>

    <!-- 项目列表 -->
    <select id="programList" parameterType="map" resultMap="ProgramDetailResultMap">
        SELECT DISTINCT p.*,
        (SELECT warning from program_warning where program_id=p.id and program_status=p.program_status ORDER BY create_time desc LIMIT 0,1) as warning ,
        (SELECT remark from program_warning where program_id=p.id and program_status=p.program_status ORDER BY create_time desc LIMIT 0,1) as warningRemark
        FROM program p JOIN program_employee pe ON p.id = pe.program_id
        left join product pt on pt.id = p.product_id
        WHERE 1=1
        <if test=" isMove != null and isMove != '' and isMove == 1">
            and p.program_status != 100
        </if>
        <if test="isAdmin == 0">
            <if test='isPart == 0'>
                and (pe.account_id = #{accountId, jdbcType=VARCHAR} OR p.type = 1)
            </if>
            <if test='isPart == 1'>
                and pe.account_id = #{accountId, jdbcType=VARCHAR}
            </if>
        </if>
        <if test="isAdmin == 1">
            <if test='isPart == 1'>
                and pe.account_id = #{accountId, jdbcType=VARCHAR}
            </if>
        </if>
        <if test="programStatusList!=null">
            and p.program_status in
            <foreach item="item" index="index" collection="programStatusList" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <!--<if test='programStatus != "" and programStatus != null  and programStatus != 0'>-->
            <!--and p.program_status = #{programStatus}-->
        <!--</if>-->
        <if test='approvalStatus != "" and approvalStatus != null  and approvalStatus != 0'>
            and p.approval_status = #{approvalStatus}
        </if>
        <if test='productId != "" and productId != null and productId != -1'>
            and (p.product_id =#{productId})
        </if>
        <if test='searchText != "" and searchText != null'>
            and (p.name like concat(concat('%',#{searchText}),'%') OR pe.employee_name like
            concat(concat('%',#{searchText}),'%'))
        </if>
        <if test='analyzingConditions != "" and analyzingConditions != null  and analyzingConditions != -1'>
            and (p.analyzing_conditions = #{analyzingConditions}
              or pt.analyzing_conditions LIKE concat(concat('%',#{analyzingConditions}),'%'))
        </if>
        <if test='label != "" and label != null  and label != ",-1,"'>
            and pt.label like concat(concat('%',#{label}),'%')
        </if>
        ORDER BY p.create_time DESC
        <!--ORDER BY if(isnull(p.waring_days),1,0),p.waring_days-->
</select>

    <!-- 项目列表 -->
    <select id="programList1" parameterType="map" resultMap="ProgramDetailResultMap">
        SELECT
        p.id id,
        p.`name` name,
        p.product_name productName,
        p.program_type programType,
        p.type type,
        p.dev_workload devWorkload,
        p.overall_cost overallCost,
        p.warning_days warningDays,
        p.program_status programStatus,
        CASE
        WHEN p.program_status = '100' THEN  substring(p.commit_date,1,10)
        WHEN p.program_status = '110' THEN  substring(p.commit_date,1,10)
        WHEN p.program_status = '120' THEN  substring(p.demo_approval_date,1,10)
        WHEN p.program_status = '130' THEN  substring(p.bidding_date,1,10)
        WHEN p.program_status = '140' THEN  substring(p.winning_bid_date,1,10)
        WHEN p.program_status = '150' THEN  substring(p.prod_approval_date,1,10)
        WHEN p.program_status = '160' THEN  substring(p.dev_approval_date,1,10)
        WHEN p.program_status = '170' THEN  substring(p.test_approval_date,1,10)
        WHEN p.program_status = '180' THEN  substring(p.online_plan_date,1,10)
        WHEN p.program_status = '190' THEN  substring(p.gray_release_date,1,10)
        WHEN p.program_status = '193' THEN  substring(p.all_extension_date,1,10)
        WHEN p.program_status = '195' THEN  substring(p.all_extension_date,1,10)
        WHEN p.program_status = '900' THEN  ''
        WHEN p.program_status = '999' THEN  ''
        ELSE '其他' END currNodeDate,
        substring(p.gray_release_date,1,10) grayReleaseDate,
        p.approval_status approvalStatus,
        (SELECT pw.warning from program_warning pw where pw.program_id=p.id ORDER BY pw.warning desc LIMIT 0,1) as warning
        from program p
        LEFT JOIN program_employee e ON p.id = e.program_id
        LEFT JOIN product d ON p.product_id = d.id
        WHERE 1 = 1
        <if test=" isMove != null and isMove != '' and isMove == 1">
            and p.program_status != 100
        </if>
        <if test="isAdmin == 0">
            <if test='isPart == 0'>
                and (e.account_id = #{accountId, jdbcType=VARCHAR} OR p.type = 1)
            </if>
            <if test='isPart == 1'>
                and e.account_id = #{accountId, jdbcType=VARCHAR}
            </if>
        </if>
        <if test="isAdmin == 1">
            <if test='isPart == 1'>
                and e.account_id = #{accountId, jdbcType=VARCHAR}
            </if>
        </if>
        <if test="programStatusList!=null">
            and p.program_status in
            <foreach item="item" index="index" collection="programStatusList" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test='approvalStatus != "" and approvalStatus != null  and approvalStatus != 0'>
            and p.approval_status = #{approvalStatus}
        </if>
        <if test='productId != "" and productId != null and productId != -1'>
            and (p.product_id =#{productId})
        </if>
        <if test='searchText != "" and searchText != null'>
            and (p.name like concat(concat('%',#{searchText}),'%') OR e.employee_name like
            concat(concat('%',#{searchText}),'%'))
        </if>
        <if test='analyzingConditions != "" and analyzingConditions != null  and analyzingConditions != -1'>
            and (p.analyzing_conditions = #{analyzingConditions}
            or d.analyzing_conditions LIKE concat(concat('%',#{analyzingConditions}),'%'))
        </if>
        <if test='label != "" and label != null  and label != ",-1,"'>
            and d.label like concat(concat('%',#{label}),'%')
        </if>
        GROUP BY p.id
        <if test=" iSortCol != null and iSortCol != '' and iSortCol=='name'">
            ORDER BY convert(substr(p.`name` ,1,1) using 'GBK')
        </if>
        <if test=" iSortCol != null and iSortCol != '' and iSortCol=='productName' ">
            ORDER BY convert(substr(productName,1,1) using 'GBK')
        </if>
        <if test=" iSortCol != null and iSortCol != '' and  iSortCol=='personLiable' ">
            ORDER BY convert(substr(GROUP_CONCAT(e.employee_name),1,1) using 'GBK')
        </if>
        <if test=" iSortCol != null and iSortCol != '' and iSortCol=='type'">
            ORDER BY if(isnull(p.type),1,0),p.type
        </if>
        <if test=" iSortCol != null and iSortCol != '' and iSortCol=='programStatus'">
            ORDER BY if(isnull(programStatus),1,0),programStatus
        </if>
        <if test=" iSortCol != null and iSortCol != '' and iSortCol=='currNodeDate'">
            ORDER BY if(isnull(currNodeDate),1,0),currNodeDate
        </if>
        <if test=" iSortCol != null and iSortCol != '' and iSortCol=='grayReleaseDate'">
            ORDER BY if(isnull(grayReleaseDate),1,0),grayReleaseDate
        </if>
        <if test=" iSortCol != null and iSortCol != '' and iSortCol=='warningDays'">
            ORDER BY if(isnull(warningDays),1,0),warningDays
        </if>
        <if test=" iSortCol != null and iSortCol != '' and iSortCol=='approvalStatus'">
            ORDER BY if(isnull(approvalStatus),1,0),approvalStatus
        </if>
        <if test=" iSortCol != null and iSortCol != '' and iSortCol=='createTime'">
            ORDER BY p.create_time
        </if>
        <if test=" sSortDir != null and sSortDir != '' and sSortDir == 'asc'">
            asc
        </if>
        <if test=" sSortDir != null and sSortDir != '' and sSortDir == 'desc'">
            desc
        </if>
    </select>

<!-- 通过产品ID查询项目列表 -->
    <select id="productIdList" parameterType="map" resultMap="ApiBaseResultMap">
        SELECT DISTINCT p.id,p.`name`,
        (select IFNULL(sum(CASE WHEN d.relation_id =p.id THEN 1 ELSE 0 END),0) from demand d where d.relation_type=2 and
        `status`=2)+
        (select IFNULL(sum(CASE WHEN b.relation_id =p.id THEN 1 ELSE 0 END),0) from bug_info b where b.relation_type=2
        and `status`=2) as pending,
        (select IFNULL(sum(CASE WHEN d.relation_id =p.id THEN 1 ELSE 0 END),0) from demand d where d.relation_type=2 and
        `status`=3)+
        (select IFNULL(sum(CASE WHEN b.relation_id =p.id THEN 1 ELSE 0 END),0) from bug_info b where b.relation_type=2
        and `status`=3) as working,
        (select IFNULL(sum(CASE WHEN d.relation_id =p.id THEN 1 ELSE 0 END),0) from demand d where d.relation_type=2 and
        `status`=4)+
        (select IFNULL(sum(CASE WHEN b.relation_id =p.id THEN 1 ELSE 0 END),0) from bug_info b where b.relation_type=2
        and `status`=4) as complete
        FROM program p JOIN program_employee pe ON p.id = pe.program_id
        WHERE 1=1
        <if test="isAdmin == 0">
            <if test='isPart == 0'>
                and (pe.account_id = #{accountId, jdbcType=VARCHAR} OR p.type = 1)
            </if>
            <if test='isPart == 1'>
                and pe.account_id = #{accountId, jdbcType=VARCHAR}
            </if>
        </if>
        <if test="isAdmin == 1">
            <if test='isPart == 1'>
                and pe.account_id = #{accountId, jdbcType=VARCHAR}
            </if>
        </if>
        <if test='programStatus != "" and programStatus != null  and programStatus != -1'>
            and p.program_status = #{programStatus}
        </if>
        <if test='productId != "" and productId != null'>
            and p.product_id = #{productId}
        </if>
        ORDER BY p.create_time DESC
    </select>

    <!-- 项目列表模糊搜索返回20条 -->
    <select id="programLimitList" parameterType="map" resultMap="BaseResultMap">
        SELECT a.* from (SELECT *,to_pinyin(`name`) pinyin FROM program) a
        <where>
            <if test="name!=null and name!=''">
                a.name LIKE CONCAT('%', #{name, jdbcType=VARCHAR}, '%')
                or a.pinyin LIKE CONCAT('%', #{name, jdbcType=VARCHAR}, '%')
            </if>
        </where>
        ORDER BY a.modified_time DESC
        LIMIT 0, 20
    </select>


    <select id="getListByMap" parameterType="map" resultMap="BaseResultMap">
        SELECT * FROM program
       <where>
           <if test="productId != null and productId != ''">
               product_id = #{productId}
           </if>
       </where>
    </select>

    <!-- 查询关联项目 -->
    <select id="inProgramId" parameterType="java.lang.String" resultMap="ProgramResultMap">
        SELECT
            id,
            name,
            type,
            program_status
        FROM program
        WHERE id IN (${_parameter})
    </select>

    <!-- 通过ID查询项目 -->
    <select id="getProgramId" parameterType="java.lang.Long" resultMap="ProgramDetailResultMap">
        SELECT p.*,
				(SELECT pw.warning from program_warning pw where pw.program_id=p.id and pw.program_status=p.program_status ORDER BY pw.create_time desc LIMIT 0,1) as warning ,
				(SELECT pw.remark from program_warning pw where pw.program_id=p.id and pw.program_status=p.program_status ORDER BY pw.create_time desc LIMIT 0,1) as warningRemark
        FROM program p
        WHERE p.id = #{id}
    </select>

    <!-- 通过ID状态查询项目 -->
    <select id="getProgram" parameterType="map" resultMap="ProgramDetailResultMap">
        SELECT p.*,
        (SELECT pw.warning from program_warning pw
                where pw.program_id=p.id ORDER BY pw.warning desc LIMIT 0,1) as warning ,
        (SELECT pw.remark from program_warning pw
                where pw.program_id=p.id ORDER BY pw.warning desc LIMIT 0,1) as warningRemark
        FROM program p
        WHERE p.id = #{id}
    </select>

    <!-- 获取最新的newCode -->
    <select id="getNewCode" resultType="String">
        SELECT  new_code FROM program ORDER BY id DESC LIMIT 0,1
    </select>

    <select id="getCountByProductId" parameterType="map" resultType="int">
        SELECT COUNT(0) FROM program p
        LEFT JOIN product pt on pt.id=p.product_id
        <where>
            <if test="productIdList!=null">
                p.product_id in
                <foreach item="item" index="index" collection="productIdList" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <if test=" type != null and type == 1 ">
              and date_format(p.create_time,'%Y-%m')=date_format(now(),'%Y-%m')
            </if>
            <if test=" type != null and  type == 2 ">
                and p.program_status != 100 and p.program_status != 900 and p.program_status != 999
            </if>
            <if test=" analyzingConditions != null and  analyzingConditions != '' and analyzingConditions != -1 ">
                and (p.analyzing_conditions = #{analyzingConditions}
                    or pt.analyzing_conditions LIKE CONCAT('%', #{analyzingConditions, jdbcType=VARCHAR}, '%'))
            </if>
        </where>
    </select>

    <select id="myFollowProgram" parameterType="map" resultMap="BaseResultMap">
        SELECT * from program where id in (
        SELECT program_id from program_follow where pf_acc = #{pfAcc} ORDER BY create_time desc
        )
        <if test="productIdList!=null">
            and product_id in
            <foreach item="item" index="index" collection="productIdList" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test=" programStatus != null and  programStatus != '' and  programStatus != 0">
            and program_status = #{programStatus}
        </if>
        <if test=" analyzingConditions != null and  analyzingConditions != '' and  analyzingConditions != -1">
            and analyzing_conditions = #{analyzingConditions}
        </if>
        ORDER BY create_time desc
        LIMIT #{startRow},#{endRow}
    </select>

    <select id="myFollowProgramTotal" parameterType="map" resultType="int">
        SELECT COUNT(0) from program where id in (
        SELECT program_id from program_follow where pf_acc = #{pfAcc} ORDER BY create_time desc
        )
        <if test="productIdList!=null">
            and product_id in
            <foreach item="item" index="index" collection="productIdList" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test=" programStatus != null and  programStatus != ''  and  programStatus != 0">
            and program_status = #{programStatus}
        </if>
        <if test=" analyzingConditions != null and  analyzingConditions != '' and  analyzingConditions != -1">
            and analyzing_conditions = #{analyzingConditions}
        </if>
        ORDER BY create_time desc
    </select>

    <select id="changeTopFive" parameterType="map" resultType="map">
        select a.programId programId,a.name programName,a.coun count from (
        SELECT program_id programId,name,COUNT(1) coun from program_approval_snapshot
        where program_status = 210 and approval_status = 110 and create_time>DATE_SUB(CURDATE(), INTERVAL 3 MONTH)
        <if test="productIdList!=null">
            and product_id in
            <foreach item="item" index="index" collection="productIdList" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test=" analyzingConditions != null and  analyzingConditions != '' and  analyzingConditions != -1">
            and analyzing_conditions = #{analyzingConditions}
        </if>
        GROUP BY program_id
        ) a ORDER BY coun desc LIMIT 0,5
    </select>

    <select id="yearCost" resultType="map">
        select pc.type,pc.descr,pc.total,a.overAllCost,pc.payment,pc.sign from  program_count pc LEFT JOIN (
        select
        analyzing_conditions as analyzingConditions,sum(overall_cost) as overAllCost
        from program where
        (program_status=110 and approval_status=110 or program_status!=100 and program_status!=110)
        /**and YEAR(create_time)=YEAR(NOW())**/
        and DATE_FORMAT(create_time,'%Y')= #{year}
        GROUP BY analyzing_conditions) a on pc.type=a.analyzingConditions
        where pc.year = #{year}
    </select>

    <select id="exportProgramList" parameterType="map" resultType="map">
        SELECT
            p.id id,
            p.product_id productId,
            p.product_name productName,
            p.product_code productCode,
            p.`name` name,
            p.descp descp,
            substring(p.commit_date,1,10) commitDate,"",
            substring(p.demo_approval_date,1,10) demoApprovalDate,"",
            substring(p.bidding_date,1,10) biddingDate,"",
            substring(p.winning_bid_date,1,10) winningBidDate,"",
            substring(p.prod_approval_date,1,10) prodApprovalDate,"",
            substring(p.dev_approval_date,1,10) devApprovalDate,"",
            substring(p.test_approval_date,1,10) testApprovalDate,"",
            substring(p.online_plan_date,1,10) onlinePlanDate,"",
            substring(p.gray_release_date,1,10) grayReleaseDate,"",
            substring(p.all_extension_date,1,10) allExtensionDate,"",
            substring(p.replay_date,1,10) replayDate,"",
            CASE
            WHEN p.program_status = '100' THEN  '未立项'
            WHEN p.program_status = '110' THEN  '立项'
            WHEN p.program_status = '120' THEN  'Demo评审'
            WHEN p.program_status = '130' THEN  '招投标申请'
            WHEN p.program_status = '140' THEN  '中标申请'
            WHEN p.program_status = '150' THEN  '产品评审'
            WHEN p.program_status = '160' THEN  '开发评审'
            WHEN p.program_status = '170' THEN  '测试评审'
            WHEN p.program_status = '180' THEN  '上线计划'
            WHEN p.program_status = '190' THEN  '灰度(试点)'
            WHEN p.program_status = '193' THEN  '全面推广'
            WHEN p.program_status = '195' THEN  '项目复盘'
            WHEN p.program_status = '900' THEN  '完成'
            WHEN p.program_status = '999' THEN  '终止'
            ELSE '其他' END programStatus,
            CASE
            WHEN p.approval_status = '100' THEN  '审批中'
            WHEN p.approval_status = '110' THEN  '审批通过'
            WHEN p.approval_status = '120' THEN  '审批驳回'
            WHEN p.approval_status = '130' THEN  '变更审批中'
            WHEN p.approval_status = '140' THEN  '变更审批驳回'
            ELSE '其他' END approvalStatus,
            CASE
            WHEN p.analyzing_conditions = '1' THEN  '地产'
            WHEN p.analyzing_conditions = '2' THEN  '商业'
            WHEN p.analyzing_conditions = '3' THEN  '数据'
            WHEN p.analyzing_conditions = '4' THEN  '冠寓'
            WHEN p.analyzing_conditions = '5' THEN  '养老'
            WHEN p.analyzing_conditions = '6' THEN  '产城'
            WHEN p.analyzing_conditions = '7' THEN  '基础中心'
            ELSE '其他' END analyzingConditions,
            p.dev_workload devWorkload,
            p.overall_cost overallCost,
            pd.label label,
            pd.label_name labelName,
            GROUP_CONCAT(e.employee_name) employeeName,
            DATE_FORMAT(p.actual_commit_date,'%Y-%m-%d') actualCommitDate,
            DATE_FORMAT(p.actual_demo_approval_date,'%Y-%m-%d') actualDemoApprovalDate,
            DATE_FORMAT(p.actual_bidding_date,'%Y-%m-%d') actualBiddingDate,
            DATE_FORMAT(p.actual_winning_bid_date,'%Y-%m-%d') actualWinningBidDate,
            DATE_FORMAT(p.actual_prod_approval_date,'%Y-%m-%d') actualProdApprovalDate,
            DATE_FORMAT(p.actual_dev_approval_date,'%Y-%m-%d') actualDevApprovalDate,
            DATE_FORMAT(p.actual_test_approval_date,'%Y-%m-%d') actualTestApprovalDate,
            DATE_FORMAT(p.actual_online_plan_date,'%Y-%m-%d') actualOnlinePlanDate,
            DATE_FORMAT(p.actual_gray_release_date,'%Y-%m-%d') actualGrayReleaseDate,
            DATE_FORMAT(p.actual_all_extension_date,'%Y-%m-%d') actualAllExtensionDate,
            DATE_FORMAT(p.actual_replay_date,'%Y-%m-%d') actualReplayDate
            from program p
            LEFT JOIN program_employee e ON p.id = e.program_id
            LEFT JOIN product pd on pd.id=p.product_id
            where e.employee_type = 1
            <if test="programStatusList!=null">
                and p.program_status in
                <foreach item="item" index="index" collection="programStatusList" open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
            <!--<if test=" programStatus != null and  programStatus != '' and  programStatus != '0'">-->
                <!--AND p.program_status = #{programStatus}-->
            <!--</if>-->
            <if test='approvalStatus != "" and approvalStatus != null  and approvalStatus != 0'>
                and p.approval_status = #{approvalStatus}
            </if>
            <if test='productId != "" and productId != null and productId != -1'>
                and p.product_id =#{productId}
            </if>
            <if test=" analyzingConditions != null and  analyzingConditions != '' and  analyzingConditions != -1">
                AND p.analyzing_conditions  LIKE CONCAT('%', #{analyzingConditions, jdbcType=VARCHAR}, '%')
            </if>
            <if test=" label != null and  label != '' and  label != ',-1,'">
                AND pd.label  LIKE CONCAT('%', #{label, jdbcType=VARCHAR}, '%')
            </if>
            <if test=" isMyself != null and  isMyself != '' and isMyself == 1 ">
                <if test=" accountId != null and  accountId != '' ">
                    AND (e.account_id = #{accountId} OR pd.contact_account_id = #{accountId})
                </if>
            </if>
            GROUP BY p.id
    </select>

    <select id="updateWarningDays" resultType="Integer" parameterType="map">
            UPDATE program set warning_days=NULL
            <where>
                <if test=" id != null and  id != '' ">
                      id = #{id}
                </if>
            </where>
    </select>
</mapper>